//WITHOUT PAGINATION AND SEARCH

import { query } from "../db/db.js";
import axios from "axios";

//helper to fetch reviews+user info
const getReviewsforBook = async (bookId) => {
    const result = await query (`SELECT r.rating, r.review_text, u.username, u.profile_img FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.book_id = $1`,[bookId]);
    return result.rows;
};
const fetchApiBookDetails = async (bookId) => {
    try{
        const url = `https://openlibrary.org/works/${bookId}.json`;
        const res = await axios.get(url);
        const data = res.data;

        const title = data.title || "Untitled";
        const genre = data.subjects?.slice(0, 4) || [];
        const description  = typeof data.description === "string"
        ? data.description
        : data.description?.value || null;
        const authorKey = data.authors?.[0]?.author?.key;
        let author = "Unknown Author";
        if (authorKey) {
            const authorRes = await axios.get(`https://openlibrary.org${authorKey}.json`);
            author = authorRes.data?.name || "Unknown Author";
        }
        const coverId = data.covers?.[0];
        const cover_img = coverId ? `https://covers.openlibrary.org/b/id/${coverId}-M.jpg` : null;

        return {title, author, cover_img, genre, description };
    }catch (err) {
        console.error("Error fetching OpenLibrary details: ", err.message );
        return null;
    }
};

//Main 
export const getBookDetails = async (req, res) => {
    const {bookId} = req.params;

    try{
        //check if book is in reviewed_books
        const reviewed = await query("SELECT * FROM reviewed_books WHERE book_key = $1", [bookId]);
        let bookData;
        if (reviewed.rowCount > 0){
            const book = reviewed.rows[0];
            bookData = {
                book_key: book.book_key,
                title: book.title,
                author: book.author,
                cover_img: book.cover_img,
                genre: book.genre?.slice(0,4) || [],
                description: book.description || null,
            };
        } else{
            //fetch from Openlibrary or custom_books
            const checkCustom = await query("SELECT * FROM custom_books WHERE book_key = $1",[bookId]);
             if (checkCustom.rowCount > 0){
            const book = checkCustom.rows[0];
            bookData = {
                book_key: book.book_key,
                title: book.title,
                author: book.author,
                cover_img: book.cover_img,
                genre: book.genre?.slice(0,4) || [],
                description: book.description || null,
            };
           } else{
            const fetched = await fetchApiBookDetails(bookId);
             if (!fetched) return res.status(404).json({message: "Book not found"});
             bookData = {
                book_key: bookId,
                ...fetched,
             };
           }
        }

        const reviews = await getReviewsforBook(bookId);
        //add review count and aerage rating
        const stats = await query(`SELECT COUNT(*) AS review_count, ROUND(AVG(rating), 1) AS average_rating FROM reviews WHERE book_id = $1`, [bookId]);
        const review_count = parseInt(stats.rows[0].review_count, 10);
        const average_rating = parseFloat(stats.rows[0].average_rating) || 0;

        res.status(200).json({
            ...bookData,
            review_count,
            average_rating,
            reviews
        });
    }catch(err){
        console.error("Error in getBookDetails:", err.message);
        res.status(500).json({message: "Internal server error"});
    }
};



//WITHOUT PAGINATION AND SEARCH